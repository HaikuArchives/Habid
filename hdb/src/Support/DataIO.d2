module Support.DataIO;

import Support.BObject;
import Support.SupportDefs;
import tango.stdc.posix.sys.types;
import tango.stdc.stringz;
import tango.io.Stdout;
import tango.stdc.stdlib;
import tango.stdc.string;

extern (C) extern {
	void *		be_BDataIO_ctor();
	void		be_BDataIO_dtor(void *);
	ssize_t		be_BDataIO_Read(void *, void *, size_t);
	ssize_t		be_BDataIO_Write(void *, void *, size_t);
}

extern (C) {
	ssize_t bind_BDataIO_Read_pure(void *bindInstPointer, void *buffer, ssize_t size) {
		return (cast(BDataIO)bindInstPointer).Read(buffer, size);
	}
	
	ssize_t bind_BDataIO_Write_pure(void *bindInstPointer, void *buffer, ssize_t size) {
		return (cast(BDataIO)bindInstPointer).Write(buffer, size);
	}
}


class BDataIO
{
public:
	mixin BObject;

	this() {
		Stdout.formatln("BDataIO ctor");
		if(c_obj is null) {
			c_obj = be_BDataIO_ctor();
			Stdout.formatln("BDataIO::Init c_obj");
		}
	}
	
	~this() {
		if(c_obj !is null)
			be_BDataIO_dtor(c_obj);
		c_obj = null;
	}
	
	abstract ssize_t Read(void *, ssize_t);
	
	abstract ssize_t Write(void *, ssize_t);
}

extern (C) extern {
	void *		be_BPositionIO_ctor(void *);
	void		be_BPositionIO_dtor(void *);
	ssize_t		be_BPositionIO_Read(void *, void *, size_t);
	ssize_t		be_BPositionIO_Write(void *, void *, size_t);
	ssize_t		be_BPositionIO_ReadAt(void *, off_t, void *, size_t);
	ssize_t		be_BPositionIO_WriteAt(void *, off_t, void *, size_t);
	off_t		be_BPositionIO_Seek(void *, off_t pos, uint32 seekMode);
	off_t		be_BPositionIO_Position(void *);
	status_t	be_BPositionIO_SetSize(void *, off_t size);
	status_t	be_BPositionIO_GetSize(void *, off_t *size);
}

extern (C) {
	ssize_t		bind_BPositionIO_ReadAt_pure(void *bindInstPointer, off_t position, void *buffer, size_t size) {
		return (cast(BPositionIO)bindInstPointer).ReadAt(position, buffer, size);
	}

	ssize_t		bind_BPositionIO_WriteAt_pure(void *bindInstPointer, off_t position, void *buffer, size_t size) {
		return (cast(BPositionIO)bindInstPointer).WriteAt(position, buffer, size);
	}

	off_t		bind_BPositionIO_Seek_pure(void *bindInstPointer, off_t pos, uint32 seekMode) {
		return (cast(BPositionIO)bindInstPointer).Seek(pos, seekMode);
	}

	off_t		bind_BPositionIO_Position_pure(void *bindInstPointer) {
		return (cast(BPositionIO)bindInstPointer).Position();
	}


	ssize_t bind_BPositionIO_Read_virtual(void *bindInstPointer, bool *called, void *buffer, size_t size) {
		BPositionIO io = cast(BPositionIO)bindInstPointer;
		
		auto baseMethod = &BPositionIO.Read;
		auto derivedMethod = &io.Read;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return io.Read(buffer, size);
		}
		
		*called = false;
		
		return 0;		
	}
	
	ssize_t bind_BPositionIO_Write_virtual (void *bindInstPointer, bool *called, void *buffer, size_t size) {
		BPositionIO io = cast(BPositionIO)bindInstPointer;
		Stdout.formatln("Do i reach here? Write");
		auto baseMethod = &BPositionIO.Write;
		auto derivedMethod = &io.Write;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return io.Write(buffer, size);
		}
		
		*called = false;
		
		return 0;
	}
		
	status_t bind_BPositionIO_SetSize_virtual(void *bindInstPointer, bool *called, off_t size) {
		BPositionIO io = cast(BPositionIO)bindInstPointer;
		Stdout.formatln("Do i reach here? Read");
		
		auto baseMethod = &BPositionIO.SetSize;
		auto derivedMethod = &io.SetSize;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return io.SetSize(size);
		}
		
		*called = false;
		
		return 0;
	}
	
	status_t bind_BPositionIO_GetSize_virtual(void *bindInstPointer, bool *called, off_t *size) {
		BPositionIO io = cast(BPositionIO)bindInstPointer;
		
		auto baseMethod = &BPositionIO.GetSize;
		auto derivedMethod = &io.GetSize;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return io.GetSize(size);
		}
		
		*called = false;
		
		return 0;
	}
}

class BPositionIO : BDataIO
{
public:
	this() {
		Stdout.formatln("BPositionIO ctor");
		if(c_obj is null) {
			c_obj = be_BPositionIO_ctor(cast(void *)this);
			Stdout.formatln("BPositionIO::Init c_obj");
		}
		super();
	}
	
	~this() {
		if(c_obj !is null)
			be_BPositionIO_dtor(c_obj);
		c_obj = null;
	}
	
	ssize_t Read(void *buffer, ssize_t size) {
		return be_BPositionIO_Read(c_obj, buffer, size);
	}
	
	ssize_t Write(void *buffer, ssize_t size) {
		return be_BPositionIO_Write(c_obj, buffer, size);
	}
	
	abstract ssize_t ReadAt(off_t position, void *buffer, ssize_t size);
	
	abstract ssize_t WriteAt(off_t position, void * buffer, ssize_t size);
	
	abstract off_t Seek(off_t position, uint32 seekMode);
	
	abstract off_t Position();
	
	status_t SetSize(off_t size) {
		return be_BPositionIO_SetSize(c_obj, size);
	}
	
	status_t GetSize(off_t *size) {
		return be_BPositionIO_GetSize(c_obj, size);
	}
}

extern (C) extern {
	void * 		be_BMemoryIO_ctor_1(void *, void *data, size_t length);
	void * 		be_BMemoryIO_ctor_2(void *, void *data, size_t length);
	
	void 		be_BMemoryIO_dtor(void *);
	
	ssize_t 	be_BMemoryIO_ReadAt(void *, off_t, void *, size_t);
	ssize_t 	be_BMemoryIO_WriteAt(void *, off_t, void *, size_t);
	off_t		be_BMemoryIO_Seek(void *, off_t, uint32);
	off_t		be_BMemoryIO_Position(void *);
	status_t	be_BMemoryIO_SetSize(void *, off_t);
}

extern (C) {
	ssize_t bind_BMemoryIO_ReadAt_virtual(void *bindInstPointer, bool *called, off_t position, void *buffer, size_t size) {
		BMemoryIO obj = cast(BMemoryIO)bindInstPointer;
		
		auto baseMethod = &BMemoryIO.ReadAt;
		auto derivedMethod = &obj.ReadAt;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return obj.ReadAt(position, buffer, size);
		}
		
		*called = false;
		
		return 0;
	}
	ssize_t bind_BMemoryIO_WriteAt_virtual(void *bindInstPointer, bool *called, off_t position, void *buffer, size_t size) {
		BMemoryIO obj = cast(BMemoryIO)bindInstPointer;

		auto baseMethod = &BMemoryIO.WriteAt;
		auto derivedMethod = &obj.WriteAt;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return obj.WriteAt(position, buffer, size);
		}
		
		*called = false;
		
		return 0;
	}

	off_t bind_BMemoryIO_Seek_virtual(void *bindInstPointer, bool *called, off_t position, uint32 seekMode) {
		BMemoryIO obj = cast(BMemoryIO)bindInstPointer;

		auto baseMethod = &BMemoryIO.Seek;
		auto derivedMethod = &obj.Seek;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return obj.Seek(position, seekMode);
		}
		
		*called = false;
		
		return 0;
	}
	off_t bind_BMemoryIO_Position_virtual(void *bindInstPointer, bool *called) {
		BMemoryIO obj = cast(BMemoryIO)bindInstPointer;

		auto baseMethod = &BMemoryIO.Position;
		auto derivedMethod = &obj.Position;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return obj.Position();
		}
		
		*called = false;
		
		return 0;
	}

	status_t bind_BMemoryIO_SetSize_virtual(void *bindInstPointer, bool *called, off_t size) {
		BMemoryIO obj = cast(BMemoryIO)bindInstPointer;

		auto baseMethod = &BMemoryIO.SetSize;
		auto derivedMethod = &obj.SetSize;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return obj.SetSize(size);
		}
		
		*called = false;
		
		return 0;
	}
}

class BMemoryIO : BPositionIO
{
public:
	this(void [] data, size_t length) {
		Stdout.formatln("BMemoryIO ctor");
		if(c_obj is null) {
			c_obj = be_BMemoryIO_ctor_1(cast(void *)this, data.ptr, length);
			Stdout.formatln("BMemoryIO::Init c_obj");
		}
		super();
	}
	
	~this() {
		if(c_obj !is null)
			be_BMemoryIO_dtor(c_obj);
		c_obj = null;
	}
	
	ssize_t ReadAt(off_t position, void * buffer, ssize_t size) {
		return be_BMemoryIO_ReadAt(c_obj, position, buffer, size);
	}
	
	ssize_t WriteAt(off_t position, void * buffer, ssize_t size) {
		return be_BMemoryIO_WriteAt(c_obj, position, buffer, size);
	}
	
	off_t Seek(off_t position, uint32 seekMode) {
		return be_BMemoryIO_Seek(c_obj, position, seekMode);
	}
	
	off_t Position() {
		return be_BMemoryIO_Position(c_obj);
	}
	
	status_t SetSize(off_t size) {
		return be_BMemoryIO_SetSize(c_obj, size);
	}
}

extern (C) extern {
	void * 		be_BMallocIO_ctor(void *);
	void		be_BMallocIO_dtor(void *);
	ssize_t		be_BMallocIO_ReadAt(void *, off_t, void *, size_t);
	ssize_t		be_BMallocIO_WriteAt(void *, off_t, void *, size_t);
	off_t		be_BMallocIO_Seek(void *, off_t, uint32);
	off_t		be_BMallocIO_Position(void *);
	void		be_BMallocIO_SetBlockSize(void *, size_t);
	void *		be_BMallocIO_Buffer(void *);
	size_t		be_BMallocIO_BufferLength(void *);
}

extern (C) {
	ssize_t bind_BMallocIO_ReadAt_virtual(void *bindInstPointer, bool *called, off_t position, void *buffer, size_t size) {
		BMallocIO obj = cast(BMallocIO)bindInstPointer;
		
		auto baseMethod = &BMallocIO.ReadAt;
		auto derivedMethod = &obj.ReadAt;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return obj.ReadAt(position, buffer, size);
		}
		
		*called = false;		
		return 0;	
	}
	
	ssize_t bind_BMallocIO_WriteAt_virtual(void *bindInstPointer, bool *called, off_t position, void *buffer, size_t size) {
		BMallocIO obj = cast(BMallocIO)bindInstPointer;
		
		auto baseMethod = &BMallocIO.WriteAt;
		auto derivedMethod = &obj.WriteAt;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return obj.WriteAt(position, buffer, size);
		}
		
		*called = false;
		return 0;
	}

	off_t bind_BMallocIO_Seek_virtual(void *bindInstPointer, bool *called, off_t position, uint32 seekMode) {
		BMallocIO obj = cast(BMallocIO)bindInstPointer;
		
		auto baseMethod = &BMallocIO.Seek;
		auto derivedMethod = &obj.Seek;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return obj.Seek(position, seekMode);
		}
		
		*called = false;
		return 0;
	}
	
	off_t bind_BMallocIO_Position_virtual(void *bindInstPointer, bool *called) {
		BMallocIO obj = cast(BMallocIO)bindInstPointer;
		
		auto baseMethod = &BMallocIO.Position;
		auto derivedMethod = &obj.Position;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return obj.Position();
		}
		
		*called = false;
		return 0;
	}

	status_t bind_BMallocIO_SetSize_virtual(void *bindInstPointer, bool *called, off_t size) {
		BMallocIO obj = cast(BMallocIO)bindInstPointer;
		
		auto baseMethod = &BMallocIO.SetSize;
		auto derivedMethod = &obj.SetSize;
		
		if(baseMethod !is derivedMethod.funcptr) {
			*called = true;
			return obj.SetSize(size);
		}
		
		*called = false;		
		return 0;
	}
}

class BMallocIO : BPositionIO
{
public:
	this() {
		Stdout.formatln("BMallocIO ctor");
		if(c_obj is null) {
			c_obj = be_BMallocIO_ctor(cast(void *)this);
			Stdout.formatln("BMallocIO::Init c_obj");
		}
		super();
	}
	
	~this() {
		if(c_obj !is null)
			be_BMallocIO_dtor(c_obj);
		c_obj = null;
	}
	
	ssize_t ReadAt(off_t position, void * buffer, ssize_t size) {
		return be_BMallocIO_ReadAt(c_obj, position, buffer, size);
	}
	
	ssize_t WriteAt(off_t position, void *buffer, ssize_t size) {
		return be_BMallocIO_WriteAt(c_obj, position, buffer, size);
	}
	
	off_t Seek(off_t position, uint32 seekMode) {
		return be_BMallocIO_Seek(c_obj, position, seekMode);
	}
	
	off_t Position() {
		return be_BMallocIO_Position(c_obj);
	}
	
	void SetBlockSize(size_t size) {
		return be_BMallocIO_SetBlockSize(c_obj, size);
	}
	
	void [] Buffer() {
		return be_BMallocIO_Buffer(c_obj)[0..BufferLength()];
	}
	
	size_t BufferLength() {
		return be_BMallocIO_BufferLength(c_obj);
	}
}
